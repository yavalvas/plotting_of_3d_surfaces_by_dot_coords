#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
#from matplotlib import contour
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib.mlab import griddata
from matplotlib import cm, rcParams
# import pylab
# pylab.rcParams['xtick.major.pad']='80'
# pylab.rcParams['ytick.major.pad']='80'
# print pylab.rcParams.keys()
# rcParams['axes.formatter.use_locale']=1
X = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     1e3, 1e3, 1e3, 1e3, 1e3, 1e3, 1e3, 1e3, 1e3, 1e3, 
     5e3, 5e3, 5e3, 5e3, 5e3, 5e3, 5e3, 5e3, 5e3, 5e3, 
     1e4, 1e4, 1e4, 1e4, 1e4, 1e4, 1e4, 1e4, 1e4, 1e4, 
     1.5e4, 1.5e4, 1.5e4, 1.5e4, 1.5e4, 1.5e4, 1.5e4, 1.5e4, 1.5e4, 1.5e4, 
     2e4, 2e4, 2e4, 2e4, 2e4, 2e4, 2e4, 2e4, 2e4, 2e4, 
     2.5e4, 2.5e4, 2.5e4, 2.5e4, 2.5e4, 2.5e4, 2.5e4, 2.5e4, 2.5e4, 2.5e4, 
     3e4, 3e4, 3e4, 3e4, 3e4, 3e4, 3e4, 3e4, 3e4, 3e4,
     5e4, 5e4, 5e4, 5e4, 5e4, 5e4, 5e4, 5e4, 5e4, 5e4, 
     1e5, 1e5, 1e5, 1e5, 1e5, 1e5, 1e5, 1e5, 1e5, 1e5, 
     1.5e5, 1.5e5, 1.5e5, 1.5e5, 1.5e5, 1.5e5, 1.5e5, 1.5e5, 1.5e5, 1.5e5,
     2e5, 2e5, 2e5, 2e5, 2e5, 2e5, 2e5, 2e5, 2e5, 2e5, 
     2.5e5, 2.5e5, 2.5e5, 2.5e5, 2.5e5, 2.5e5, 2.5e5, 2.5e5, 2.5e5, 2.5e5, 
     3e5, 3e5, 3e5, 3e5, 3e5, 3e5, 3e5, 3e5, 3e5, 3e5]
print len(X)
Y = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818,
     0, 5, 10, 15, 20, 25, 30, 35, 40, 45.0818]
print len(Y)
Z = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0.00000001359492565, 0.00000002745297888, 0.00000004139874132, 0.00000005516908536, 0.000000068764011, 0.0000000826220643, 0.0000000963046991, 0.0000001101627523, 0.0000001244593516, 
     0, 0.00000006902713859, 0.0000001381419864, 0.0000002069937066, 0.0000002760208452, 0.0000003449602746, 0.0000004137242857, 0.0000004827514242, 0.000000551866272, 0.0000006222090486,
     0, 0.0000001381419864, 0.0000002761962636, 0.0000004140751224, 0.0000005521293996, 0.0000006900959675, 0.0000008280625355, 0.0000009661168127, 0.000001103907962, 0.000001244330388,
     0, 0.0000002066428698, 0.0000004139874132, 0.0000006209811198, 0.0000008279748264, 0.000001034880824, 0.000001241699112, 0.000001448605109, 0.000001655774234, 0.000001866100891,
     0, 0.0000002757577176, 0.0000005517785628, 0.0000008278871172, 0.000001103732544, 0.000001379577971, 0.000001655598816, 0.000001931619661, 0.000002207640506, 0.000002488046811,
     0, 0.0000003452234022, 0.0000006899205492, 0.000001034968533, 0.000001380016517, 0.000001724889082, 0.000002069937066, 0.000002414809631, 0.000002759857615, 0.000003110431278,
     0, 0.0000004139874132, 0.0000008278871172, 0.000001241699112, 0.000001655774234, 0.000002069849357, 0.000002483661351, 0.000002897648765, 0.000003311636178, 0.000003732201781,
     0, 0.00000068983284, 0.000001379841098, 0.000002069673938, 0.000002759769906, 0.000003449515037, 0.000004139698714, 0.000004829531554, 0.000005519364394, 0.00000622051172,
     0, 0.000001379841098, 0.000002759769906, 0.000004139611004, 0.000005519539812, 0.000006899205492, 0.000008279222009, 0.000009658975398, 0.00001103890421, 0.00001244146199,
     0, 0.000002069849357, 0.000004139698714, 0.00000620963578, 0.000008279397427, 0.00001034907137, 0.00001241900843, 0.00001448877008, 0.00001655844402, 0.00001866223683,
     0, 0.000002759682197, 0.000005519452103, 0.000008279309718, 0.00001103899191, 0.00001379876182, 0.00001655818089, 0.0000193180385, 0.00002207807154, 0.00002488266084,
     0, 0.000003449778164, 0.00000689946862, 0.00001034907137, 0.00001379867411, 0.0000172487154, 0.0000206978796, 0.00002414774548, 0.00002759743593, 0.00003110343569,
     0, 0.000004139523295, 0.00000827904659, 0.0000124187453, 0.00001655853173, 0.00002069796731, 0.00002483757832, 0.00002897710161, 0.00003311662491, 0.00003732412283]
print len(Z)
xi = np.linspace(np.min(X), np.max(X))
yi = np.linspace(np.min(Y), np.max(Y))
zi = griddata(X, Y, Z, xi, yi)
plt.contour(xi, yi, zi)
fig = plt.figure()
#ax = Axes3D(fig)
ax = fig.add_subplot(111, projection='3d')
ax.set_title(u"Без дисперсии с n1=1.7127, Umax = 45.0818 до beta=1E-3")
#ax.set_ylim(0,1)
ax.set_xlabel(u'Vo[м/с]')
ax.set_ylabel(u'Vd[м/с]')
ax.set_zlabel(u'ddle[ед]')
zlabs = ['{:1.1E}'.format(i*1E-6) for i in xrange(0, 45, 5)]
ax.set_zticklabels(zlabs)
ax.set_zticks(zlabs)
# xlabs = ['{:1.0E}'.format(i*1E2) for i in xrange(0, 350, 50)]
xlabs = ['{:1.1E}'.format(i) for i in xrange(0, 350000, 50000)]
ax.set_xticklabels(xlabs)
ax.set_xticks(xlabs)
ylabs = ['{:1.0E}'.format(i*10) for i in xrange(0, 6, )]
ax.set_yticklabels(ylabs)
ax.set_yticks(ylabs)


# ax.get_xaxis().get_major_formatter().set_useOffset(False)
# print dir(ax.get_xaxis().get_major_formatter())
xim, yim = np.meshgrid(xi, yi) 
Gx, Gy = np.gradient(zi) #gradient with respect to x and y
G = (Gx**2+Gy**2)**.5 #gradient magitude
N = G/G.max()# normalize 0..1
print "XIM", xim
print "YIM", yim
print "ZI", zi
from pprint import pprint
pprint(xim)
pprint(yim)
pprint(zi)
ax.plot_surface(xim, yim, zi, rstride=1, cstride=1, facecolors=cm.jet(N), linewidth=0, antialiased=False, shade=False)
plt.show()
